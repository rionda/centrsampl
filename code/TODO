We are going to implement our code in Python3.3.1, using and extending the
igraph library (http://igraph.sourceforge.net)

Add timeout functionality in the C part of the code

Use the same percentage of sample space

Run the algorithm for different topologies

Implement top-K algorithm

Implement adaptive sampling algorithm

# DONE! Implement code to automatize reports

# DONE! Implement ALENEX (GSS) paper sampling algorithm 

# DONE! Download graph data from http://snap.stanford.edu/data and
http://law.di.unimi.it/datasets.php (not done from unimi as they are not in a
format readable by igraph so whatever)

# DONE! Implement code to automatize experiments

# DONE! Implement code to count how many edges are touched during the computation of
betweenness. This can be play an important factor in large networks.

# DONE ! Implement code to find the largest connected component in the diameter
approximation algorithm

# DONE ! Extend approximation algorithm to directed case

# DONE! Make sure our implementations of Brandes, Brandes and Pachi, and the ALENEX paper
are the best possible.

# DONE! Implement converter to convert them from the native format (list of
edges?) to an igraph graph

# DONE! Implement Dijkstra's algorithm for shortest path to take into account the
possibility of multiple shortest paths

# DONE! Implement diameter approximation algorithm for undirected, unweighted graphs

# DONE! Implement VC sampling algorithm

# DONE! Implement Brandes and Pich sampling algorithm

# DONE! Implement Brandes exact algorithm for betweenness centrality

# DONE! Implement code to compare results

